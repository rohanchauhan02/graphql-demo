.PHONY: postgres setup generate start build test clean migrate init lint fmt help

# Configuration
DB_NAME := graphql_demo
DB_USER := postgres
DB_PASSWORD := postgres
DB_PORT := 5432

# File patterns
GENERATED_FILES := internal/*/delivery/graphql/generated.go \
                   internal/*/delivery/graphql/model/models_gen.go
BAK_FILES := $(shell find internal -name "schema.resolvers.go.bak")

# Start PostgreSQL container
postgres:
	@echo "🚀 Starting PostgreSQL container..."
	@docker pull postgres:latest
	@docker run --name postgres \
		-e POSTGRES_USER=$(DB_USER) \
		-e POSTGRES_PASSWORD=$(DB_PASSWORD) \
		-e POSTGRES_DB=$(DB_NAME) \
		-p $(DB_PORT):5432 \
		-d postgres:latest
	@echo "✅ PostgreSQL running at localhost:$(DB_PORT)"

# Setup project dependencies
setup: postgres
	@echo "🔧 Setting up project..."
	@go mod tidy
	@cp .env.example .env 2>/dev/null || true
	@echo "✅ Project setup complete"

# Generate GraphQL code while preserving resolver implementations
generate:
	@echo "⚙️ Generating GraphQL code..."

	@# Backup existing resolver implementations
	@find internal -name "schema.resolvers.go" -exec cp {} {}.bak \;

	@# Clean only generated files
	@for file in $(GENERATED_FILES); do \
		if [ -f "$$file" ]; then \
			rm "$$file"; \
			echo "🧹 Deleted: $$file"; \
		fi; \
	done

	@# Generate new GraphQL code
	@go run github.com/99designs/gqlgen generate

	@# Restore preserved resolver implementations
	@find internal -name "schema.resolvers.go.bak" | while read backup; do \
		original=$${backup%.bak}; \
		echo "♻️ Merging preserved resolvers into: $$original"; \
		awk '/^package/ { print; print ""; print "// Code generated by gqlgen. DO NOT EDIT."; next } \
			/^\/\/ Code generated by gqlgen. DO NOT EDIT./ { inGen=1; next } \
			inGen && /^}/ { inGen=0; next } \
			!inGen { print }' "$$original" > "$$original.tmp"; \
		for section in mutationResolver queryResolver; do \
			grep -A1000 "type $$section struct {" "$$backup" | \
			sed -n '/^}/q;p' | sed '1d' >> "$$original.tmp"; \
		done; \
		tail -n 1 "$$original.tmp" | grep -q '^}$' || echo "}" >> "$$original.tmp"; \
		mv "$$original.tmp" "$$original"; \
		rm "$$backup"; \
	done

	@echo "✅ GraphQL code generation complete"

migrate:
	@echo "📦 Running database migrations..."
	@go run cmd/migrate/main.go
	@echo "✅ Migrations complete"

# Format Go code using go fmt
fmt:
	@echo "🎯 Formatting code..."
	@go fmt ./...
	@echo "✅ Code formatted"

# Lint Go code using golangci-lint (must be installed)
lint:
	@echo "🔍 Running lint checks..."
	@golangci-lint run ./...
	@echo "✅ Linting complete"

# Start the application
start:
	@echo "🚀 Starting application..."
	@go run main.go

# Build the application
build:
	@echo "🔨 Building application..."
	@go build -o bin/graphql-demo main.go
	@echo "✅ Build complete: bin/graphql-demo"

# Run tests
test:
	@echo "🧪 Running tests..."
	@go test -v ./...

# Clean only safe generated and backup files
clean:
	@echo "🧹 Cleaning generated and temp files..."
	@for file in $(GENERATED_FILES) $(BAK_FILES); do \
		if [ -f "$$file" ]; then \
			rm "$$file"; \
			echo "🗑️ Deleted: $$file"; \
		fi; \
	done
	@echo "✅ Clean complete"

# Full project initialization
init: setup generate migrate fmt
	@echo "✅ Project initialization complete"

# Show help
help:
	@echo ""
	@echo "🧰 Available commands:"
	@echo "  make postgres    - Start PostgreSQL container"
	@echo "  make setup       - Setup project dependencies"
	@echo "  make generate    - Regenerate GraphQL code (preserves custom resolvers)"
	@echo "  make migrate     - Run database migrations"
	@echo "  make start       - Run the application"
	@echo "  make build       - Build the application"
	@echo "  make test        - Run tests"
	@echo "  make fmt         - Auto-format Go code"
	@echo "  make lint        - Lint code with golangci-lint"
	@echo "  make clean       - Remove generated + backup files"
	@echo "  make init        - Full project initialization"
	@echo "  make help        - Show this help message"
