.PHONY: postgres setup generate start build test clean migrate init lint fmt help

## Configuration
DB_NAME := graphql_demo
DB_USER := postgres
DB_PASSWORD := postgres
DB_PORT := 5432
SUBDOMAINS := user payment  # Add more subdomains as needed

## File patterns
GENERATED_FILES := internal/*/delivery/graphql/generated.go \
                   internal/*/delivery/graphql/model/models_gen.go \
                   internal/*/delivery/graphql/schema.resolvers.go
BAK_FILES := $(shell find internal -name "*.bak")

## Start PostgreSQL container
postgres:
	@echo "üöÄ Starting PostgreSQL container..."
	@docker pull postgres:latest
	@docker run --rm --name postgres \
		-e POSTGRES_USER=$(DB_USER) \
		-e POSTGRES_PASSWORD=$(DB_PASSWORD) \
		-e POSTGRES_DB=$(DB_NAME) \
		-p $(DB_PORT):5432 \
		-d postgres:latest
	@echo "‚úÖ PostgreSQL running at localhost:$(DB_PORT)"

## Setup project dependencies
setup: postgres
	@echo "üîß Setting up project..."
	@go mod tidy
	@cp .env.example .env 2>/dev/null || true
	@echo "‚úÖ Project setup complete"

## Run database migrations
migrate:
	@echo "üì¶ Running database migrations..."
	@go run cmd/migrate/main.go
	@echo "‚úÖ Migrations complete"

## Format Go code
fmt:
	@echo "üéØ Formatting code..."
	@go fmt ./...
	@echo "‚úÖ Code formatted"

## Lint using golangci-lint
lint:
	@echo "üîç Running lint checks..."
	@golangci-lint run ./...
	@echo "‚úÖ Linting complete"

## Start the application
start:
	@echo "üöÄ Starting application..."
	@go run main.go

## Build the application
build:
	@echo "üî® Building application..."
	@go build -o bin/graphql-demo main.go
	@echo "‚úÖ Build complete: bin/graphql-demo"

## Run tests
test:
	@echo "üß™ Running tests..."
	@go test -v ./...

## Clean generated and backup files
clean:
	@echo "üßπ Cleaning generated and backup files..."
	@for file in $(GENERATED_FILES) $(BAK_FILES); do \
		if [ -f "$$file" ]; then \
			rm "$$file"; \
			echo "üóëÔ∏è Deleted: $$file"; \
		fi; \
	done
	@echo "‚úÖ Clean complete"

## Generate GraphQL code (preserving custom resolvers)
generate:
	@echo "‚öôÔ∏è Generating GraphQL code..."

	@# Backup custom resolver files
	@find internal -name "schema.resolvers.go" -exec cp {} {}.bak \;
	@find internal -name "resolver.go" -exec cp {} {}.bak \;

	@# Remove generated files
	@for file in $(GENERATED_FILES); do \
		if [ -f "$$file" ]; then \
			rm "$$file"; \
			echo "üßπ Deleted: $$file"; \
		fi; \
	done

	@# Generate GraphQL code per subdomain
	@for subdomain in $(SUBDOMAINS); do \
		if [ -f "gqlgen/$$subdomain.yml" ]; then \
			echo "üîß Generating GraphQL for: $$subdomain"; \
			go run github.com/99designs/gqlgen generate --config gqlgen/$$subdomain.yml || exit 1; \
		fi; \
	done

	@# Merge resolver definitions back
	@find internal -name "*.bak" | while read backup; do \
		original=$${backup%.bak}; \
		if echo "$$original" | grep -q "schema.resolvers.go"; then \
			echo "‚ôªÔ∏è Merging custom resolvers into: $$original"; \
			awk 'BEGIN {print "// Code generated by gqlgen. DO NOT EDIT."} \
				/^package/ {print; next} \
				/^\/\/ Code generated by gqlgen/ {inGen=1; next} \
				inGen && /^}/ {inGen=0; next} \
				!inGen {print}' "$$original" > "$$original.tmp"; \
			for resolver in mutationResolver queryResolver subscriptionResolver; do \
				grep -A1000 "type $$resolver struct {" "$$backup" | \
				sed -n '/^}/q;p' | sed '1d' >> "$$original.tmp"; \
			done; \
			mv "$$original.tmp" "$$original"; \
		elif echo "$$original" | grep -q "resolver.go"; then \
			echo "‚ôªÔ∏è Restoring original: $$original"; \
			mv "$$backup" "$$original"; \
		fi; \
		rm -f "$$backup"; \
	done

	@echo "‚úÖ GraphQL code generation complete for subdomains: $(SUBDOMAINS)"

## Project initialization
init: setup generate migrate fmt
	@echo "‚úÖ Full project initialization complete"

## Show help
help:
	@echo ""
	@echo "üß∞ Available Commands:"
	@echo "  make postgres    - Start PostgreSQL container"
	@echo "  make setup       - Setup project (includes DB and env)"
	@echo "  make generate    - Regenerate GraphQL code (preserve resolvers)"
	@echo "  make migrate     - Run database migrations"
	@echo "  make start       - Start the application"
	@echo "  make build       - Build the binary"
	@echo "  make test        - Run all tests"
	@echo "  make fmt         - Format Go code"
	@echo "  make lint        - Run lint checks"
	@echo "  make clean       - Remove generated/backup files"
	@echo "  make init        - One-time full setup"
	@echo "  make help        - Show this help menu"
